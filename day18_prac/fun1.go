package main

import "fmt"

// 练习 7.12

// 编写一个函数，要求其接受两个参数，原始字符串 str 和分割索引 i，然后返回两个分割后的字符串。

func test1(a int, b int) int {

}

// 练习 7.13

// 假设有字符串 str，那么 str[len(str)/2:] + str[:len(str)/2] 的结果是什么？

// 练习 7.14

// 编写一个程序，要求能够反转字符串，即将 “Google” 转换成 “elgooG”（提示：使用 []byte 类型的切片）。

// 如果您使用两个切片来实现反转，请再尝试使用一个切片（提示：使用交换法）。

// 如果您想要反转 Unicode 编码的字符串，请使用 []int32 类型的切片。

// 练习 7.15

// 编写一个程序，要求能够遍历一个数组的字符，并将当前字符和前一个字符不相同的字符拷贝至另一个数组。

// 练习 7.16

// 编写一个程序，使用冒泡排序的方法排序一个包含整数的切片（算法的定义可参考 维基百科）。

// 练习 7.17

// 在函数式编程语言中，一个 map-function 是指能够接受一个函数原型和一个列表，并使用列表中的值依次执行函数原型，公式为：map ( F(), (e1,e2, . . . ,en) ) = ( F(e1), F(e2), ... F(en) )。

// 编写一个函数 mapFunc 要求接受以下 2 个参数：

// 一个将整数乘以 10 的函数
// 一个整数列表
// 最后返回保存运行结果的整数列表

func main() {
	fmt.Println("hello world")
}
